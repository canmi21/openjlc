name: Rust CI

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Cargo CI"]
    types: [completed]

jobs:
  build-1:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
      max-parallel: 3
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.read.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Read Cargo.toml Version
        id: read
        shell: bash
        run: |
          VERSION=$(grep -m1 '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/openjlc artifacts/openjlc-${{ matrix.target }}
      - name: Rename files
        shell: bash
        run: |
          cd artifacts
          for file in openjlc-*; do
            mv "$file" "$(echo $file | sed 's/-pc//')"
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openjlc-${{ matrix.target }}
          path: artifacts/

  build-2:
    needs: build-1
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
      max-parallel: 2
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/openjlc artifacts/openjlc-${{ matrix.target }}
      - name: Rename files
        shell: bash
        run: |
          cd artifacts
          for file in openjlc-*; do
            mv "$file" "$(echo $file | sed 's/-pc//')"
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openjlc-${{ matrix.target }}
          path: artifacts/

  release:
    needs: [build-1, build-2]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Organize Artifacts
        shell: bash
        run: |
          mkdir -p release
          for dir in artifacts/*; do
            for file in "$dir"/*; do
              mv "$file" "release/$(basename "$file")"
            done
          done
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-1.outputs.version }}
          name: v${{ needs.build-1.outputs.version }}
          files: |
            release/openjlc-x86_64-unknown-linux-gnu
            release/openjlc-x86_64-windows-msvc.exe
            release/openjlc-i686-windows-msvc.exe
            release/openjlc-x86_64-apple-darwin
            release/openjlc-aarch64-apple-darwin